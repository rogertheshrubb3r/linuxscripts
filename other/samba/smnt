#!/bin/sh

DBG=
VRB=1

SMBUSER=Guest
SMBPASS=

FMASK=0664
DMASK=0775

SMBUID=root
SMBGID=fserver

#root mount point
MNTROOT=/mnt

DEFAULTMOUNTS="
pc1: //pc1/d
pc2: //pc2/d
pc3: //pc3/d
pc4: //pc4/d
pc5: //pc5/d
pc6: //pc6/d
"

EXCLUDED="
[Pp]rinter.*
deskjet
[Cc]anon
[Ll]exmark
SharedDocs

utils
utils32
OVIDIU
SERVER
"
#\\PC3\\utils
#\\PC3\\utils32
#\\PC3\\Far
#\\SERVER
#\\OVIDIU
#\\OFFICE
#"

usage() {
HLP="
show/mount smb shares ** alpha **
usage: $0 [options]
options:
  -a		mount/unmount all
  -lm		list mounted shares
  -lma		list all [default]
  -m		mount
  -ma		mount all

  --view	view (path)

  -c		check if host is up
  -u		unmount
  -p		smb password

  -d,--debug	debug info

  -h		this help
"
echo "$HLP"
exit $@
}

### PARAMETER PARSING
while [ $# -gt 0 ]; do
  case "$1" in 
    -a) WHAT=all; shift ;;
    -m) ACTION=mount; shift;;
    -ma) ACTION=mount; WHAT=all; shift ;;
    -u) ACTION=unmount; shift ;;
    -ua) ACTION=unmount; WHAT=all; shift ;;
    -l) ACTION=listmounted; shift ;;
    -lm) ACTION=listmounted; shift ;;
    -lma) ACTION=listmounted; WHAT=all; shift ;;
    -la) ACTION=listall; shift ;;
    -c) ACTION=check; shift ;;
    -ca) ACTION=check; WHAT=all; shift ;;
    -d|--debug) DBG=1; shift ;;
    -h* | --h*) usage 0 ;;
    -gid) SMBGID=$2; shift 2 ;;
    -uid) SMBUID=$2; shift 2 ;;
    --user ) SMBUSER=$2; shift 2 ;;
    --pass* ) SMBPASS=$2; shift 2 ;;
    -m | --fmode ) FMASK=$2; shift 2 ;;
    -v ) VRB=1; shift ;;
    --view ) ACTION=view; shift ;;
   * ) ACTION=mount; PCS="$PCS\n$1"; shift ;;
  esac
done

[ $ACTION ] || ACTION=listmounted
[ $WHAT ] || WHAT=defaults

[ $DBG ] && echo "*** DEBUG INFO ENABLED ***"
[ $DBG ] && VRB=1

TMPFILE=`mktemp -t smb-stat.XXXXXX`  || TMPFILE=/tmp/smb-stat.tmp
TMPFILE2=`mktemp -t smb-stat2.XXXXXX` || TMPFILE2=/tmp/smb-stat2.tmp
TMPTREE=`mktemp -t TMPTREE.XXXXXX` || TMPTREE=/tmp/smnt-TMPTREE.tmp

[ $DBG ] && echo -e "created temp fies:\n$TMPFILE\n$TMPFILE2\n$TMPTREE\n"

getmounted() {
# get mounted shares
    local TMPFILE=`mktemp -t smnt-getmounted.XXXXXX` || TMPFILE=/tmp/smnt-getmounted.tmp
    mount|grep smbfs>$TMPFILE
    MOUNTED=`awk '{print $1}' $TMPFILE`
    MOUNTEDNUM=`echo $MOUNTED|wc -l`
    rm $TMPFILE
    echo $MOUNTED
}

printmounts() {
# print mounts
mount|grep smbfs
}

unmountsmb() {
# smbunmount [pc [share]]
# if "pc" is not specified, ALL smb shares for ALL pcs are unmounted
# if "share" is not specified, ALL smb shares for the "pc" are unmounted
MOUNTED=`getmounted|grep -i "$1"|grep -i "$2"`
MNTDDIRS=`mount|grep smbfs|grep -i "$1"|grep -i "$2"|awk '{print $3}'`
[ $DBG ] && echo "(unmountsmb) params: $@"
[ $DBG ] && echo "(unmountsmb) MOUNTED=$MOUNTED"
if [ "$MOUNTED" ]; then
    [ $VRB ] && echo "unmounting [$MOUNTED]..."
    umount $MOUNTED
fi
for i in $MNTDIRS; do
    echo "removing :$i"; rmdir $i
done
}

unmountall() {
local TMPFILE=`mktemp -t smnt-umount.XXXXXX` || TMPFILE=/tmp/smnt-umount.tmp
mount|grep smbfs>$TMPFILE
MOUNTED=`awk '{print $1}' $TMPFILE`
SMOUNTS=`wc -l $TMPFILE|awk '{print $1}'`
MNTDIRS=`awk '{print $3}' $TMPFILE`
rm $TMPFILE
if [ "$SMOUNTS" != "0" ]; then
    echo "Mounted SMB drives: $SMOUNTS; unmounting..."
    mount|grep smbfs|awk '{print $1}'
umount $MOUNTED
echo removing mount dirs...
rmdir $MNTDIRS
else
    echo "No SMB drives are currently mounted."
fi
}


# read PCs from tree


getwg() {
# get workgroup
    head -n1 $TMPTREE
}

# find PCs
getpcs() {
cat $TMPTREE|cut -b4-|awk -F\\ '{print $1}' >> $TMPFILE
# strip workgroup name
echo `sort -u $TMPFILE|awk 'NR>2{print $1}'`
#echo `awk 'NR>2{print $1|"sort"}' $TMPFILE`
}

getshares() {
# get shares for given pc
local SHARES
[ $DBG ] && echo "[getshares ($@)] G_EX=$G_EX">&2
SHARES=`cat $TMPTREE|cut -b5-|grep -i "^$1"|grep -v "$G_EX"|cut -d\\\ -f2-|cut -f1`
[ $DBG ] && echo "[getshares ($@)] SHARES:" $SHARES>&2
echo $SHARES
#cat $TMPTREE|grep -i "^$1"|grep -v "$G_EX"|awk -F\\ 'NF>3{print $4}'|awk '{print $2}'
#echo `cat $TMPTREE|awk ''`
#grep "^$1"|grep -v "$G_EX"|cut -d\\\ -f2-|cut -f1`
}

getip() {
# usage: getip <host>
# get ip for given host
host $@|grep "has address"|awk '{print $4}'
}

hostup() {
# usage: hostup <host>
    echo "$ALLPCS"|grep -i $@
}

mountsmb() {
# mount smb path; 
# usage: mountsmb pc1 d OR mountsmb //pc1/d OR mountsmb pc1/d
#STR=`echo "$@"|sed 's/\/\///g'`
[ $DBG ] && echo sedding..
STR=`echo "$@"|sed 's/\\/\\///g'`
P=`echo "$STR"|awk -F/ '{print $2}'`
if [ "$P" ]; then
    S=`echo "$STR"|awk -F/ '{print $1}'`
else
    S=$1; P=$2
fi

SMBPATH="//$S/$P"
MNTPATH="$MNTROOT/$S-$P"
MNTPATH=`echo $MNTPATH|awk '{print tolower($L)}'`
if [ $DBG ]; then
    echo "\$1: $1"
    echo "\$2: $2"
    echo "S: $S"
    echo "P: $P"
    echo "SMBPATH: $SMBPATH"
    echo "MNTPATH: $MNTPATH"
fi
# does mount path exist?
ISMOUNTED=`mount|grep "$MNTPATH"`
if [ "$ISMOUNTED" ]; then
    echo "Can't mount $SMBPATH: $MNTPATH is already in use."
#    exit 1
else
# create mount path if not exists
if [ ! -d $MNTPATH ]; then mkdir "$MNTPATH"; fi
# run command
[ $VRB ] && echo "mounting: //$i/$j to $MNTPATH"
MNTCMD="mount -t smbfs -o username=$SMBUSER,password=$SMBPASS,fmask=$FMASK,dmask=$DMASK,uid=$SMBUID,gid=$SMBGID $SMBPATH $MNTPATH"
[ $DBG ] && echo "running: $MNTCMD"
$MNTCMD
EXITCODE=$?
#echo exitcode: $EXITCODE
[ "$EXITCODE" != "0" ] && rmdir $MNTPATH
fi
}

maketree() {
[ $DBG ] && echo "gettree(): Creating TMPTREE"
smbtree -N>$TMPTREE
[ $DBG ] && echo "gettree(): Created TMPTREE"
}

getallpcs() {
# uses tree
[ $DBG ] && echo "[Getting all PCs]"
ALLPCS=`getpcs`
[ $DBG ] && echo "ALLPCS: $ALLPCS"
}

############################################################################
### MAIN ###### MAIN ###### MAIN ###### MAIN ###### MAIN ###### MAIN ###### 
############################################################################
[ $DBG ] && echo "[Entering MAIN]"

if [ "$ACTION" != "listmounted" ]; then getallpcs; fi

# build list of excluded shares (ie. printers, adminshares)
if [ "$EXCLUDED" ] || [ $EXCLUDE_ADMINSHARES ]; then
    [ -z $EXCLUDE_ADMINSHARES ] && G_EX="\\\$"
    for i in $EXCLUDED; do
        [ $G_EX ] && G_EX="$G_EX\|"
        G_EX="$G_EX$i"
    done
    G_EX="\($G_EX\)"
fi
[ $DBG ] && echo "G_EX=$G_EX"

PCS=`echo -e $PCS`
if [ "$WHAT" == "all" ]; then PCS="$ALLPCS"; fi

# build grep expression from PCs
for i in $PCS; do
    [ $GX ] && GXE="$GX\|"
    GXE="$GX$i"
done
GX="\($GX\)"

if [ $DBG ]; then
    echo "GX=$GX"
    echo "ACTION=$ACTION"
    echo "PCS=$PCS"
    echo "WHAT=$WHAT"
fi

case $ACTION in
    check)
	for i in "$PCS"; do
	    HOSTUP=`echo "$ALLPCS"|grep -i "^$i$"`
	    echo -n "$i is ";
	    if [ $HOSTUP ]; then
		echo "UP"
		echo "shares for $i: "`getshares $i`
	    else echo DOWN
	    fi
	done
    ;;
    mount)
	for i in $PCS; do
	    [ $DBG ] && echo "[action:mount] mounting pc: $i"
	    # is a shortcut in config?
	    SHORTCUT=`echo "$DEFAULTMOUNTS"|grep -i $i`
	    [ $DBG ] && echo "SHORTCUT: $SHORTCUT"
	    if [ "$SHORTCUT" ]; then
		# get mounts
		if [ $DBG ]; then
		echo "sedding: SHORTCUT: $SHORTCUT; i: $i"
		fi
#		awkstr='{gsub print}'
		MOUNTS=`echo $SHORTCUT|awk '{gsub ("//$i/", "");  print}'`
		[ $DBG ] && echo "MOUNTS: $MOUNTS"
		for j in $MOUNTS; do
		    [ $DBG ] && echo "running: mountsmb $j"
		    mountsmb $j
		done
	    else # is not a shortcut
		SHARES=`echo $i|awk -F/ '{print $2}'`  # parse pc2/d, get pc/share
		[ $DBG ] && echo "SHARES: $SHARES"
		if [ -z $SHARES ]; then
		    SHARES=`getshares $i`
		else 
		    i=`echo $i|awk -F/ '{print $1}'`
		fi
		[ $DBG ] && echo "[action:mount] shares for $i: $SHARES"
		for j in $SHARES;  do
		    mountsmb $i $j
		done
	    fi
	done
    ;;
    unmount)
	if [ "$WHAT" == "all" ]; then 
	    [ $VRB ] && echo "unmounting all smb filesystems"
	    unmountall
	else
	    for i in "$PCS"; do
		[ $DBG ] && echo "unmounting: $i"
		unmountsmb $i
	    done
	fi
    ;;
    listmounted)
	[ "$PCS" ] || WHAT=all
        [ $VRB ] && echo "Listing mounted smb filesystems"
        MOUNTED=`mount|grep smbfs`
        MOUNTEDNUM=`mount|grep smbfs|wc -l`
        echo "Mounted smb filesystems: $MOUNTEDNUM"
        echo "$MOUNTED"
        exit 0
    ;;
    listall)
	[ $DBG ] && echo "action: listall"
	for i in $ALLPCS; do
	    echo $i: `getshares $i`
	done
    ;;
    view)
	smbclient -NL $SMBPATH
    ;;
    *)
#	usage; exit 1
    ;;
esac

rm -f $TMPFILE $TMPFILE2 $TMPTREE > /dev/null
exit 0

echo Workgroup:`getwg`

echo -n "PC's: "
for i in $ALLPCS; do echo -n "$i, "; done
echo ""
for i in $ALLPCS; do 
echo --$i:
getshares $i
echo --
done

exit

rm -f $TMPFILE $TMPTREE
