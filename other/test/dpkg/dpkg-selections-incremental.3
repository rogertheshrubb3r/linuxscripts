#!/bin/sh
#works.

DBG=no
VERBOSE=yes

# test multiple diff/patch: apply a series of patches to a base file to get last version

FILEDIR=/root/installed-packages

basefile=$FILEDIR/`ls -t1 $FILEDIR | tail -n1` # oldest file
newfile=$FILEDIR/packages-`date +%Y%m%d`.diff.gz
#############! delme!!!!!!!!!!!!!!!!!!!!!!!!
######
rm $newfile

function dpkg_list_changes() {
    echo hello
}


tmpfile=/tmp/debian-selections.tmp

if [ -f $newfile ]; then
    echo "A diff file with current date already exists. try again tomorrow!"
    exit 1
fi

if [ "$DBG" == "yes" ]; then echo "basefile: $basefile"; fi

zcat $basefile > $tmpfile.old

for i in `ls $FILEDIR/*.diff.gz`; do 
# IMPORTANT: name order should be the same as date order!! 
# (dates should be in the format yyyy-mm-dd)
    if [ "$DBG" == "yes" ]; then echo "applying patch: $i"; fi
    zcat $i | patch $tmpfile.old >/dev/null
done

dpkg --get-selections >$tmpfile.new
diff $tmpfile.old $tmpfile.new >$tmpfile.diff
#echo "exit code: $?"
if [ "$?" == "0" ]; then
    echo "No packages installed/upgraded/modified/removed since the last list update."
    exit 0
fi

echo ""
echo "Some packages were installed/upgraded/modified/removed since the last list update."
echo -n "writing changes to $newfile..."

cat $tmpfile.diff | gzip > $newfile
# remove temporary files
#rm $tmpfile.old $tmpfile.new $tmpfile.diff
echo "done."

echo ""
echo "------------------------------------------------------------"
echo "List of hanges from "`echo $i|awk -F- '{print $3}'|awk -F. '{print $1}'`" to "`echo $newfile | awk -F- '{print $3}'|awk -F. '{print $1}'`":"
echo "------------------------------------------------------------"

ins=0; rem=0
installed=
removed=

exec 3<> $tmpfile.diff
while read -a line <&3
do {
    if [ "${line[0]}" == ">" ]; then # package installed
#	echo "  ${line[1]}" >> $tmpfile.installed
	if [ "$VERBOSE" == "yes" ]; then
		installed=$installed`dpkg -l ${line[1]}|tail -n1`"\n"
	else
        	installed=$installed"  ${line[1]}\n"
        fi
#	echo instld: $installed
#	let "ins = $ins + 1"
	(( ins++ ));
    elif [ "${line[0]}" == "<" ]; then # package deleted
#	echo "  ${line[1]}" >> $tmpfile.removed
	if [ "$VERBOSE" == "yes" ]; then
		removed=$removed`dpkg -l ${line[1]}|tail -n1`"\n"
	else
        	removed=$removed"  ${line[1]}\n"
        fi
#	let "rem = $rem + 1"
	(( rem++ ));
#    	echo rem: ${rem}
#	rmv=${rem}
    fi
}
done
exec 3>&-

echo "Removed/purged packages: ${rem}"
#cat $tmpfile.removed
printf "$removed"
echo -e "---\n"

echo "Installed/upgraded packages: ${ins}"
#cat $tmpfile.installed
printf "$installed"
echo -e "---\n"

rm -f $tmpfile.removed $tmpfile.installed $tmpfile.old $tmpfile.new $tmpfile.diff >/dev/null

